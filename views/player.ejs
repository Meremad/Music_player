<%- include('partials/header') %>

<div class="container mx-auto p-6">
    <h1 class="text-4xl font-bold text-center text-gray-800 mb-6">Music Player</h1>

    <!-- Search Section -->
    <div class="flex flex-col items-center mb-6">
        <input type="text" id="searchInput" placeholder="Search for songs" 
               class="w-full max-w-lg px-4 py-2 border border-gray-300 rounded shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
        <div class="flex gap-3 mt-3">
            <button onclick="searchSongs()" 
                    class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 shadow-md">Search</button>
            <button id="watchVideoButton" onclick="getVideo()" class="bg-red-500 text-white px-6 py-2 rounded-lg hover:bg-red-600" style="display: none;">Watch Video</button>
        </div>
    </div>

    <div id="player" class="mt-6 text-center"></div>

    <div id="videoContainer" class="mt-6 text-center"></div>


    <div id="searchResults" class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6"></div>
    
    
    <!-- News Section -->
    <div id="newsSection" class="mt-12">
        <h2 class="text-3xl font-semibold mb-6 text-gray-800 text-center">Latest Music News</h2>
        <div id="newsContainer" class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- News cards will be inserted here -->
            <div class="text-center text-gray-500">Loading music news...</div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
// News Loading Logic
document.addEventListener("DOMContentLoaded", async () => {
    const newsContainer = document.getElementById("newsContainer");
    const API_KEY = "<%= process.env.NEWS_API_KEY %>";

    try {
        const response = await axios.get("https://newsapi.org/v2/everything", {
            params: {
                apiKey: API_KEY,
                q: "music",
                language: "en",
                sortBy: "publishedAt",
                pageSize: 4
            }
        });

        if (!response.data || !response.data.articles) {
            throw new Error("Invalid API response structure");
        }

        newsContainer.innerHTML = "";
        response.data.articles.forEach(article => {
            const card = document.createElement("a");
            card.href = article.url;
            card.target = "_blank";
            card.className = "bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow";
            
            const image = article.urlToImage || "https://via.placeholder.com/600x400?text=No+Image";
            const date = article.publishedAt ? new Date(article.publishedAt).toLocaleDateString() : 'Unknown date';
            
            card.innerHTML = `
                <div class="h-48 bg-gray-100 overflow-hidden mb-3">
                    <img src="${image}" alt="${article.title}" class="w-full h-full object-cover" loading="lazy">
                </div>
                <h3 class="text-lg font-semibold text-gray-800 mb-2">${article.title}</h3>
                <p class="text-sm text-gray-600 line-clamp-2">${article.description || ''}</p>
                <div class="mt-2 text-sm text-gray-500">
                    ${date} • ${article.source?.name || ''}
                </div>
            `;
            newsContainer.appendChild(card);
        });
    } catch (error) {
        console.error("News loading error:", error);
        newsContainer.innerHTML = `
            <div class="col-span-2 text-center py-8 text-red-500">
                Failed to load news. Please try again later.
            </div>`;
    }
});

// Modified Search Function
function searchSongs() {
    const query = document.getElementById('searchInput').value.trim();
    const newsSection = document.getElementById('newsSection');
    
    if (!query) {
        newsSection.style.display = 'block';
        return alert('Please enter a search query');
    }

    // Hide news when searching
    newsSection.style.display = 'none';

    fetch(`/player/search?q=${encodeURIComponent(query)}`)
        .then(response => response.json())
        .then(data => {
            const resultsDiv = document.getElementById('searchResults');
            resultsDiv.innerHTML = '';
            document.getElementById('videoContainer').innerHTML = '';
            
            if (data.tracks.items.length > 0) {
                document.getElementById('watchVideoButton').style.display = 'block';
                document.getElementById('watchVideoButton').setAttribute('data-query', query);
            }
            
            data.tracks.items.forEach(track => {
                const trackDiv = document.createElement('div');
                trackDiv.className = 'bg-white p-4 rounded-lg shadow-md flex flex-col items-center';
                trackDiv.innerHTML = `
                    <img src="${track.album.images[0].url}" class="w-48 h-48 rounded-lg shadow mb-3">
                    <h3 class="text-lg font-semibold">${track.name}</h3>
                    <p class="text-gray-600">${track.artists[0].name}</p>
                    <div class="mt-3 flex gap-3">
                        <button onclick="playSong('${track.id}')" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">Play</button>
                        <a href="/player/details?artist=${track.artists[0].name}&title=${track.name}" class="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600">Details</a>
                    </div>
                `;
                resultsDiv.appendChild(trackDiv);
            });
        })
        .catch(error => {
            console.error('Error:', error);
            newsSection.style.display = 'block'; // Show news again on error
            alert('An error occurred while searching for songs. Please try again.');
        });
}

// Play Song Function with Horizontal Layout
function playSong(trackId) {
  fetch(`/player/play/${trackId}`)
    .then(response => response.json())
    .then(data => {
      const playerDiv = document.getElementById('player');
      playerDiv.innerHTML = ''; // Очистка предыдущего плеера

      // Создаем основной контейнер с горизонтальной версткой
      const playerContainer = document.createElement('div');
      playerContainer.className = "bg-gray-800 text-white rounded-lg shadow-lg p-6 max-w-2xl mx-auto flex items-center";

      // Получаем URL обложки альбома, если она доступна
      let albumArtUrl = "";
      if (data.album && data.album.images && data.album.images.length > 0) {
        albumArtUrl = data.album.images[0].url;
      }

      // Левая часть – обложка альбома
      if (albumArtUrl) {
        const albumArtContainer = document.createElement('div');
        albumArtContainer.className = "w-1/3";
        const albumArt = document.createElement('img');
        albumArt.src = albumArtUrl;
        albumArt.alt = data.name;
        albumArt.className = "w-full rounded-lg";
        albumArtContainer.appendChild(albumArt);
        playerContainer.appendChild(albumArtContainer);
      }

      // Правая часть – информация и элементы управления
      const rightContainer = document.createElement('div');
      rightContainer.className = "w-2/3 ml-4 flex flex-col justify-center";

      // Блок с информацией о треке
      const infoDiv = document.createElement('div');
      infoDiv.className = "mb-4";
      infoDiv.innerHTML = `
        <h2 class="text-2xl font-bold">${data.name}</h2>
        <p class="text-gray-300">${data.artists.map(artist => artist.name).join(', ')}</p>
      `;
      rightContainer.appendChild(infoDiv);

      if (data.preview_url) {
        // Создаем аудио-элемент (скрытый, т.к. реализуем свои контролы)
        const audio = document.createElement('audio');
        audio.src = data.preview_url;
        audio.preload = "metadata";
        audio.style.display = "none";
        rightContainer.appendChild(audio);

        // Контейнер для кастомных элементов управления (горизонтальный ряд)
        const controlsContainer = document.createElement('div');
        controlsContainer.className = "flex items-center space-x-4";

        // Кнопка play/pause
        const playPauseBtn = document.createElement('button');
        playPauseBtn.className = "bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded";
        playPauseBtn.textContent = "Play";
        controlsContainer.appendChild(playPauseBtn);

        // Контейнер для прогресс-бара
        const progressContainer = document.createElement('div');
        progressContainer.className = "w-full bg-gray-700 h-2 rounded-full relative cursor-pointer";
        // Индикатор прогресса
        const progressBar = document.createElement('div');
        progressBar.className = "bg-blue-500 h-2 rounded-full";
        progressBar.style.width = "0%";
        progressContainer.appendChild(progressBar);
        controlsContainer.appendChild(progressContainer);

        // Отображение времени воспроизведения
        const timeDisplay = document.createElement('div');
        timeDisplay.className = "text-sm";
        timeDisplay.textContent = "0:00 / 0:30";
        controlsContainer.appendChild(timeDisplay);

        rightContainer.appendChild(controlsContainer);
        playerContainer.appendChild(rightContainer);
        playerDiv.appendChild(playerContainer);

        // Функция форматирования времени (секунды -> mm:ss)
        const formatTime = (time) => {
          const minutes = Math.floor(time / 60);
          const seconds = Math.floor(time % 60);
          return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
        };

        // Обновление прогресса и времени воспроизведения
        audio.addEventListener('timeupdate', () => {
          const duration = audio.duration || 30;
          const currentTime = audio.currentTime;
          const progressPercent = (currentTime / duration) * 100;
          progressBar.style.width = `${progressPercent}%`;
          timeDisplay.textContent = `${formatTime(currentTime)} / ${formatTime(duration)}`;
        });

        // Обработчик клика по кнопке play/pause
        playPauseBtn.addEventListener('click', () => {
          if (audio.paused) {
            audio.play().then(() => {
              playPauseBtn.textContent = "Pause";
            }).catch(error => {
              console.error('Playback error:', error);
            });
          } else {
            audio.pause();
            playPauseBtn.textContent = "Play";
          }
        });

        // Возможность перехода по прогресс-бару
        progressContainer.addEventListener('click', (e) => {
          const rect = progressContainer.getBoundingClientRect();
          const clickX = e.clientX - rect.left;
          const width = rect.width;
          const duration = audio.duration || 30;
          const seekTime = (clickX / width) * duration;
          audio.currentTime = seekTime;
        });

        // Остановка воспроизведения через 30 секунд
        audio.addEventListener('play', () => {
          setTimeout(() => {
            audio.pause();
            playPauseBtn.textContent = "Play";
          }, 30000);
        });

      } else {
        // Если preview недоступно – выводим встроенный плеер Spotify
        rightContainer.innerHTML += `
          <p class="text-gray-300 text-center">Preview not available. Enjoy via Spotify embed:</p>
          <div class="flex justify-center mt-2">
            <iframe src="https://open.spotify.com/embed/track/${data.id}" width="300" height="80" frameborder="0" allowtransparency="true" allow="encrypted-media" class="rounded-lg"></iframe>
          </div>
        `;
        playerContainer.appendChild(rightContainer);
        playerDiv.appendChild(playerContainer);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while playing the song. Please try again.');
    });
}



// Get Video Function with Toggle (Open/Close)
function getVideo() {
  const videoContainer = document.getElementById('videoContainer');
  const watchVideoButton = document.getElementById('watchVideoButton');

  // Если контейнер уже содержит видео, закрываем его
  if (videoContainer.innerHTML.trim() !== "") {
    videoContainer.innerHTML = "";
    watchVideoButton.textContent = "Watch Video";
    return;
  }

  // Иначе получаем видео с сервера и отображаем его
  const query = watchVideoButton.getAttribute('data-query');
  fetch(`/player/video?q=${encodeURIComponent(query)}`)
    .then(response => response.json())
    .then(data => {
      videoContainer.innerHTML = `
        <h3 class="text-xl font-bold mt-6 text-gray-800">Music Video</h3>
        <div class="mt-4 flex justify-center relative">
          <iframe width="800" height="450" src="https://www.youtube.com/embed/${data.videoId}" frameborder="0" allowfullscreen class="rounded-lg shadow-lg"></iframe>
        </div>
      `;
      watchVideoButton.textContent = "Close Video";
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while fetching the video. Please try again.');
    });
}

</script>

<%- include('partials/footer') %>